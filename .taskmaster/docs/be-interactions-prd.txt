[be-interactions]-prd
Title: Personal Blog – Interactions API (Likes + Bookmarks)

Purpose
- Implement user interactions: like/unlike posts & comments; bookmark/unbookmark posts; expose counts and user-state flags.

Scope (MVP)
- Toggle like on posts and comments (one like per user per target)
- Toggle bookmark on posts
- Fetch counts and didCurrentUserLike/Bookmark flags
- List who liked a post/comment; list user bookmarks
- Simple rate limiting

Out of Scope
- Reaction types beyond 'like'
- Social graph, notifications, advanced analytics

API (REST)
Base: /api/interactions

POST /api/interactions/posts/:postId/like
- Idempotent toggle like for a post.
- Response: { liked: boolean, likeCount: number }

POST /api/interactions/comments/:commentId/like
- Idempotent toggle like for a comment.
- Response: { liked: boolean, likeCount: number }

GET /api/interactions/posts/:postId/likes/stats
GET /api/interactions/comments/:commentId/likes/stats
- Returns: { count: number, likedByMe: boolean }

GET /api/interactions/posts/:postId/likes
GET /api/interactions/comments/:commentId/likes
- Query: page=1, limit=20 (≤50)
- Returns: { items: [{ id, username }], page, limit, total }

POST /api/interactions/posts/:postId/bookmark
- Idempotent toggle bookmark for a post.
- Response: { bookmarked: boolean }

GET /api/me/bookmarks
- Query: page, limit, q (ILIKE title), tag, category
- Returns paginated published posts with bookmarkedAt

POST /api/interactions/batch
- Body: { postIds?: string[], commentIds?: string[] }
- Returns:
  {
    posts: { [postId]: { likedByMe: boolean, bookmarkedByMe: boolean } },
    comments: { [commentId]: { likedByMe: boolean } }
  }

Rules & Constraints
- Likes: exactly one of (postId, commentId) must be provided.
- Bookmarks: posts only.
- Visibility: cannot like/bookmark non-existent or non-visible targets (public cannot target drafts).
- Toggles are idempotent and safe to repeat.

Data & Performance
- Use likes and bookmarks tables (Phase 1). Indexes:
  - idx_likes_user_post (user_id, post_id) UNIQUE NULLS NOT DISTINCT
  - idx_likes_user_comment (user_id, comment_id) UNIQUE NULLS NOT DISTINCT
  - idx_bookmarks_user_post (user_id, post_id) UNIQUE
- Counts:
  - MVP: COUNT(*) queries with short-lived cache
  - Optional: denormalized counters on posts/comments with transactional updates

Security
- Auth required.
- Public may like/bookmark only published posts; drafts limited to author/admin.
- Users see only their own bookmark library (MVP).

Errors
- 400 invalid target
- 401 unauthenticated
- 403 forbidden (target not visible)
- 404 not found

Rate Limiting
- Per-user throttle on toggles (e.g., max 10 toggles / 10s). Client-side debounce recommended.

Implementation Notes
- Services:
  - togglePostLike({ postId, userId })
  - toggleCommentLike({ commentId, userId })
  - getPostLikeStats({ postId, userId })
  - getCommentLikeStats({ commentId, userId })
  - togglePostBookmark({ postId, userId })
  - listUserBookmarks({ userId, page, limit, filters })
  - batchFlags({ userId, postIds, commentIds })
- Unique indexes enforce single-like/bookmark invariants.
- If using counters, wrap toggle + counter update in a transaction.

Test Plan
Unit
- Toggle idempotency, unique constraints, visibility guards
Integration
- Like/unlike post & comment; bookmark/unbookmark; list bookmarks
- Stats endpoints; batch flags for feed/detail
- Pagination on who-liked & bookmarks

Acceptance Criteria
- Users can like/unlike posts and comments; counts reflect accurately.
- Users can bookmark/unbookmark posts; can list their bookmarks.
- Batch flags enable feed/detail to show likedByMe/bookmarkedByMe efficiently.
- Rate limits prevent spammy toggling.
