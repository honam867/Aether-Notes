[be-posts-api]-prd
Title: Personal Blog – Posts API (MVP)

Purpose
- Implement Posts domain for Node.js API (Supabase Postgres). Next.js client consumes these endpoints.
- Cover create/edit/publish/archive, tags & category assignment, public feeds, and SEO slugs.
- Auth & uploads already implemented.

Scope (MVP)
- CRUD for posts (draft|published|archived)
- Assign/unassign tags (many-to-many) and optional category (one)
- Set cover image from existing uploads
- Public list & detail (by slug) with pagination and simple search
- Manage tags/categories (create+list)

Out of Scope
- Comments, likes, bookmarks (handled in later phases)
- Admin UI, analytics, advanced search

API (REST)
Base: /api

POST /api/posts
- Create draft post.
- Body: { title, content, categoryId?, tagIds?: string[], coverImageId?, metaDescription?, isFeatured? }
- Behavior: generate unique slug; status='draft'; create post_tags entries.
- Response: 201 + Post

PATCH /api/posts/:id
- Update fields: title, content, categoryId, tagIds (replace), coverImageId, metaDescription, isFeatured.
- Optional query: ?regenerateSlug=true (otherwise keep slug stable).
- Response: 200 + Post

POST /api/posts/:id/publish
- Sets status='published', publishedAt=now().
- Preconditions: title+content non-empty.
- Response: 200 + Post

POST /api/posts/:id/unpublish
- Sets status='draft', publishedAt=null.
- Response: 200 + Post

POST /api/posts/:id/archive
- Sets status='archived'.
- Response: 200 + Post

GET /api/posts/:id
- Author/Admin access to any status. Returns post with category, tags, coverImage.

GET /api/posts/slug/:slug
- Public only if status='published'. Returns post with category, tags, coverImage.

GET /api/posts
- Public feed, published only.
- Query: page=1, limit=10 (≤50), category (slug or id), tag (slug or id), q (ILIKE title), featured (bool), sort? (publishedAt|createdAt)
- Response: { items, page, limit, total }

GET /api/me/posts
- Author dashboard; filter by status, page, limit.

POST /api/tags
- Create tag if not exists. Body: { name }
GET /api/tags
- List all tags with optional usage counts.

POST /api/categories
- Create category. Body: { name, description? }
GET /api/categories
- List categories.

Data Contracts
Post
{
  id, userId, title, slug, content,
  category: { id, name, slug } | null,
  tags: [{ id, name, slug }],
  coverImage: { id, publicUrl } | null,
  metaDescription, isFeatured, status, publishedAt, createdAt, updatedAt
}

Validation
- title: 1..255; content: required
- metaDescription ≤ 500
- tagIds length ≤ 10
- categoryId, coverImageId must exist if provided
- publish requires title+content

Slug Rules
- Kebab-case, ASCII-fold. Ensure uniqueness; on conflict append -2, -3...
- Do not change on title edits unless regenerateSlug=true.

Search/Filter (MVP)
- Title ILIKE for q.
- Filter by tag/category via slug or id.
- Sort by publishedAt DESC, then createdAt DESC.

Security
- Authors CRUD own posts; admins CRUD all.
- Public endpoints only return published posts.
- Enforce via API middleware/service checks.

Errors
- 400 invalid, 401 unauth, 403 forbidden, 404 not found, 409 slug conflict, 422 publish preconditions

Implementation Notes
- Drizzle ORM repositories; service layer applies business rules.
- Transactions for post + post_tags updates.
- Use indices from DB PRD: (status,published_at), slug, category_id.

Test Plan
Unit
- slug generator; tag merge/replace; state transitions
Integration
- create→update→publish flow; list filters; get by slug visibility; authz

Deliverables
- Routes under /api/posts, /api/tags, /api/categories
- Migrations aligned with DB PRD
- Seed: 3 categories, 5 tags, 5 posts
- OpenAPI/Insomnia collection

Acceptance
- Client can render public feed & detail by slug
- Author can create/edit/publish/archive
- Tags/categories manageable; filtering & basic search work
- Slugs unique & stable; pagination works
